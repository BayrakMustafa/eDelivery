<?xml version="1.0"?>
<document>
	<properties>
		<title>Support for Testing</title>
	</properties>
	<body>
	<section name="Tools provided for Adoption of the eDelivery Building Block and Testing">
			<p>There are some convenient tools provided to develop and test
			the functionality of a national adapter. This site will be amended soon!</p>
	</section>
	<subsection name="Adapter test using the MDTemplate project ">
		<p>
		You can use the <b>MDTemplate</b> project as test Gateway, acting "on behalf" of
		a Gateway to a foreign solution covering the domain "@SPOCS-EDELIVERYTEST.EU".<br/>
		To test the implementations of the domestic Gateway, this generic SPOCS eDelivery GW implementation
		is able to provide some error codes and evidence messages in response to a Dispatch, somewhat in a
		"ping" manner. Depending on the callers 
		settings in the Dispatch element <source>REMDispatch/NormalizedMsg/Informational/Keywords</source>
		<br/>
		<table>
			<tr>
				<th>keywords attribute</th>
				<th>value</th>
			</tr>
			<tr>
				<td>@scheme</td>
				<td>SpocsTesting</td>
			</tr>
			<tr>
				<td>@meaning</td>
				<td>SimulateEvidences</td>
			</tr>
		</table>
		<br/>
		the implementation will react with following SOAP response:
		<table>
			<tr>
				<th>keywords value</th>
				<th>effect</th>
			</tr>
			<tr>
				<td>DeliveryNonDeliveryToRecipient</td>
				<td>Returns a (non)delivery Evidence in the backchannel</td>
			</tr>
			<tr>
				<td>RelayREMMDRejection</td>
				<td>Returns a non RelayREMMDRejection (Rejection) evidence in the backchannel</td>
			</tr>
			<tr>
				<td>NonRetrievalByRecipient</td>
				<td>Returns a RetrievalNonRetrievalByRecipient(NonRetrieval) with a new REMMDMessage some seconds later</td>
			</tr>
			<tr>
				<td>RetrievalByRecipient</td>
				<td>Returns a RetrievalNonRetrievalByRecipient(Retrieval) with a new REMMDMessage some seconds later</td>
			</tr>
			<tr>
				<td>AcceptanceRejectionByRecipientMessage</td>
				<td>Returns an AcceptanceRejectionByRecipientMessage(Acceptance) with a new REMMDMessage some seconds later</td>
			</tr>
			<tr>
				<td>ReturnDispatch (to simulate initial REMDispatch entry at domestic Gateway)</td>
				<td>Returns a new REMDispatch message some seconds later. Same content, exchanged from/to, sender SAML token etc. </td>
			</tr>
		</table>
	<br/>
	Look 
	<a href="https://joinup.ec.europa.eu/svn/spocs/eDelivery/tags/EDelivery-1.3.1/EDelivery-Gateway/MDTemplate/src/main/resources/spocsConfig.xml">
	here</a> for the example MDTemplate configuration file. The whole MDTemplate project
	has to be build as WAR file and to be installed on your Web Application Server.<br/>
	Below folllows a code example for the simulation. The configuration file setting 
	<source>gwImplClass="eu.spocseu.gw.template.SampleImpl"</source> in this case must be set to
	<source>gwImplClass="eu.spocseu.edeliverygw.process.DefaultImpl".</source><br/>
	<source>
	static String RECIPIENT = "rl@SPOCS-EDELIVERYTEST.EU";
       static String SENDER = "wo@SPOCS-EDELIVERYTEST.EU";

       public static void configure() throws FileNotFoundException
       {
             Configuration.setInputDataXML(new FileInputStream(new File(
                    "src/test/resources/spocsConfig.xml")));
       }

       public DispatchMessageResponse sendDispatchMessage(String simulation)
                    throws Exception
       {
             Date initialSend = new Date();
             DeliveryConstraints deliveryConstraints = new DeliveryConstraints(
                    initialSend);

             Originators originator = new Originators(RECIPIENT);
             Destinations destinations = new Destinations(RECIPIENT);
             MsgIdentification msgIdentification = new MsgIdentification("MSG_ID");
             SAMLProperties samlProperties = new SAMLProperties();
             samlProperties.setCitizenQAAlevel(1);
             samlProperties.setSurname("Oley");

             DispatchMessage dispatch = new DispatchMessage(deliveryConstraints,
                    originator, destinations, msgIdentification, samlProperties);

             Normalized normalized = new Normalized();
             normalized.setInformational("Test", "");
             normalized.addKeywords(simulation, "SpocsTesting", "SimulateEvidences");

             Original original = new Original("test".getBytes(), "txt");
             dispatch.setContent(normalized, original);

             return dispatch.sendDispatchMessage();
       }

       public void DeliveryNonDeliverySimulation() throws Exception
       {
             configure();
             DispatchMessageResponse reponse = null;
             try {
                    reponse = sendDispatchMessage("DeliveryNonDeliveryToRecipient");
                    assertNotNull(reponse.getDeliveryNonDeliveryToRecipientObj());
             } catch (NonDeliveryException ex) {
                    // this is what we expect!
             }
       }

       public void RelayREMMDRejectionSimulation() throws Exception
       {
             configure();
             DispatchMessageResponse reponse = null;
             try {
                    reponse = sendDispatchMessage("RelayREMMDRejection");
                    assertNotNull(reponse.getRelayToREMMDAcceptanceRejectionObj());
             } catch (RelayREMMDRejectionException ex) {
                    // this is what we expect!
             }
       }

	</source>
	
	</p>
	
	</subsection>	
	
	<subsection name= "Using the UI-based Test Gateways">
	Description will be provided soon! 
	</subsection>
	</body>
</document>
